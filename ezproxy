#! /bin/bash

VERSION="2.3.0"

PROXY_IP=""
PROXY_PORT="1080"

if [ "$0" = "$BASH_SOURCE" ]; then
    echo "警告: 此脚本应该使用 'source' 命令执行，例如: source $(basename "$0")"
    exit 1
fi


CONFIG_FILE="$HOME/.config/ezproxy/config"

CONFIG_DIR=$(dirname "$CONFIG_FILE")
if [ ! -d "$CONFIG_DIR" ]; then
    mkdir -p "$CONFIG_DIR"
    echo "创建配置目录: $CONFIG_DIR"
fi

if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    
    echo "# ezproxy 配置文件" > "$CONFIG_FILE"
    echo "PROXY_PORT=\"$PROXY_PORT\"" >> "$CONFIG_FILE"
    echo "创建默认配置文件: $CONFIG_FILE"
fi

usage() {
    echo "用法: source ezproxy [-i IP] [-p PORT] [-d DEFAULT_PORT]"
    echo "选项:"
    echo "  -i IP            设置代理IP地址 (默认: SSH客户端IP)"
    echo "  -p PORT          设置代理端口号 (默认: $PROXY_PORT)"
    echo "  -d DEFAULT_PORT  设置默认端口号 (当前: $PROXY_PORT)"
    echo "  -v VERSION       显示版本信息"
    echo "  -g GIT           设置 Git 代理"
    echo "  -r RESET         取消代理设置"
    echo "  -j JUPYTER       设置 Jupyter Notebook 代理"
    echo "  -h               显示此帮助信息"
    return 1
}

save_port() {
    echo "# ezproxy 配置文件" > "$CONFIG_FILE"
    echo "PROXY_PORT=\"$1\"" >> "$CONFIG_FILE"
}


EXIT_AFTER_OPTS=false
GIT_PROXY=false
JUPYTER_PROXY=false
UNSET_PROXY=false

while [ $# -gt 0 ]; do
    case "$1" in
        -i)
            PROXY_IP="$2"
            shift 2
            ;;
        -p)
            PROXY_PORT="$2"
            shift 2
            ;;
        -d)
            PROXY_PORT="$2"
            save_port $PROXY_PORT
            EXIT_AFTER_OPTS=true
            return 0
            ;;
        -v)
            echo "ezproxy 版本: $VERSION"
            EXIT_AFTER_OPTS=true
            return 0
            ;;
        -r)
            UNSET_PROXY=true
            shift
            ;;
        -g)
            GIT_PROXY=true
            shift
            ;;
        -j)
            JUPYTER_PROXY=true
            shift
            ;;
        -h)
            usage
            EXIT_AFTER_OPTS=true
            return 0
            ;;
        *)
            echo "未知选项: $1"
            usage
            EXIT_AFTER_OPTS=true
            return 1
            ;;
    esac
done

if [ "$EXIT_AFTER_OPTS" = true ]; then
    return 0
fi

if [ "$UNSET_PROXY" = true ]; then
    if [ "$GIT_PROXY" = true ]; then
        git config --global --unset http.proxy
        git config --global --unset https.proxy
        echo "已取消 Git 代理设置"
        return 0
    else
        unset http_proxy https_proxy all_proxy
        echo "已取消全局代理设置"
        return 0
    fi
fi

if [ -z "$PROXY_IP" ]; then
    if [ -n "$SSH_CLIENT" ]; then
        PROXY_IP=$(echo "$SSH_CLIENT" | awk '{print $1}')
    else
        echo "未提供代理IP，且无法从SSH_CLIENT获取IP"
        return 1
    fi
fi

if [ -z "$PROXY_PORT" ]; then
    echo "未提供端口，且默认端口为空"
    return 1
fi

PROXY_ADDR="${PROXY_IP}:${PROXY_PORT}"

if [ "$GIT_PROXY" = "true" ]; then
    git config --global http.proxy "http://$PROXY_ADDR"
    git config --global https.proxy "http://$PROXY_ADDR"
    echo "已设置 Git 代理: $PROXY_ADDR"
    echo "请注意，Git 代理设置不会影响其他命令行工具。"
    return 0
fi

if [ "$JUPYTER_PROXY" = "true" ]; then
    echo "jupyter 需要手动设置代理，请在代码块中加入以下内容:"
    echo ""
    echo "import os"
    echo "os.environ['http_proxy'] = 'http://$PROXY_ADDR'"
    echo "os.environ['https_proxy'] = 'http://$PROXY_ADDR'"
    echo "os.environ['all_proxy'] = 'socks5://$PROXY_ADDR'"
    return 0
fi  

export http_proxy="http://$PROXY_ADDR"
export https_proxy="http://$PROXY_ADDR"
export all_proxy="socks5://$PROXY_ADDR"

echo "已设置代理: $PROXY_ADDR"
echo "当前会话已启用代理。关闭当前终端或重新登录后，代理设置将失效。"
echo "您可以通过运行以下命令检查代理是否工作:"
echo "curl -I https://www.google.com"